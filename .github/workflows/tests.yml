name: Unit tests

on:
  push:
    branches: [ master ]
    paths-ignore:
      - 'scripts/**'
      - '.github/workflows/dokku.yml'
      - 'Procfile'
      - 'Dockerfile'
  pull_request:

jobs:
  js-tests:
    defaults:
      run:
        working-directory: web
    name: Web app tests
    runs-on: ubuntu-latest
    environment: tests
    container: node:20-bullseye

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:12.4
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        # Docker Hub image
        image: redis
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    # Force https use since ssh does not work
    - run: 'git config --global url."https://github.com/".insteadOf ssh://git@github.com/'
    - run: 'git config --global url."https://".insteadOf ssh://'

    - uses: pnpm/action-setup@v4
      with:
        version: 10

    - uses: actions/setup-node@v4
      with:
        node-version: 22
        cache: 'pnpm'
        cache-dependency-path: pnpm-lock.yaml

    - name: Install deps
      run: |
        pnpm install --frozen-lockfile
        cd .. && pnpm install --frozen-lockfile

    - name: Initialize database
      run: cd .. && pnpm migrate:up && pnpm migrate:test

    - name: Run vitest and generate coverage
      run: pnpm test:ci

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        flags: frontend
        name: Frontend coverage
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}

    env:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: postgres
      DB_NAME_TEST: postgres
      DB_USER: postgres
      PGPASSWORD: postgres

      ELASTIC_NODE: http://localhost:9200

      REDIS_URL: redis:6379
      DEBUG: debug,session-*,auth-info
      TZ: UTC
      LEVEL: silent
      SKIP_POSTINSTALL: true
      IS_CI: true

  python-tests:
    name: Scraper tests
    runs-on: ubuntu-latest
    environment: tests
    container: python:3.13

    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:12.4
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:7.17.28
        env:
          discovery.type: single-node
        options: >-
          --health-cmd "curl http://localhost:9200/_cluster/health"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
        ports:
          - 9200:9200

    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 10
      - uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'
      - name: Setup uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Install dependencies
        run: uv sync --group dev

      - name: Lint with ruff
        run: uv run ruff check

      - name: Type checks with mypy
        run: uv run mypy --config-file mypy.ini ./src

      - name: Install db migration dependencies
        run: pnpm install --frozen-lockfile --ignore-scripts
      - name: Test with pytest
        run: uv run pytest --cov=./src --cov-report=xml --junit-xml=./junit.xml src

      - name: Uninstall coveragepy
        run: uv run pip uninstall -y coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          flags: scraper
          name: Scraper coverage
          files: './coverage/coverage.xml,./junit.xml'
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

    env:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: postgres
      DB_NAME_TEST: postgres
      DB_USER: postgres
      PGPASSWORD: postgres
      DB_PASSWORD: postgres
      NO_TEMP_DB: TRUE
      ELASTIC_TEST_HOST: elasticsearch
      ELASTIC_TEST_PORT: 9200

  e2e-tests:
    defaults:
      run:
        working-directory: web
    name: Cypress E2E tests
    runs-on: ubuntu-latest
    if: false
    container:
      image: cypress/browsers:node22.17.0
      options: --user 1001

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:12.4
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        # Docker Hub image
        image: redis
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
      # Force https use since ssh does not work
      - run: 'git config --global url."https://github.com/".insteadOf ssh://git@github.com/'
      - run: 'git config --global url."https://".insteadOf ssh://'

      - uses: pnpm/action-setup@v4
        with:
          version: 10

      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml

      - name: Install deps
        run: cd .. && pnpm install --frozen-lockfile

      - name: Initialize database
        run: cd .. && pnpm migrate:up && pnpm migrate:test

      - name: Persist Next.js build cache
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/web/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: nextjs-${{ hashFiles('pnpm-lock.yaml') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            nextjs-${{ hashFiles('pnpm-lock.yaml') }}-

      - uses: cypress-io/github-action@v6
        with:
          browser: chrome
          working-directory: ./web
          build: pnpm cross-env NODE_ENV=production pnpm build-nyc
          start: pnpm cross-env NODE_ENV=production pnpm start-coverage
          wait-on: 'http://localhost:3000'
          project: cypress


      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          flags: E2E
          name: E2E coverage
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

    env:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: postgres
      DB_NAME_TEST: postgres
      DB_USER: postgres
      PGPASSWORD: postgres

      ELASTIC_NODE: http://localhost:9200
      NEXTAUTH_URL: 'http://localhost:3000'
      NEXTAUTH_SECRET: secret

      REDIS_URL: redis:6379
      DEBUG: debug,session-*,auth-info
      TZ: UTC
      LEVEL: silent
      SKIP_POSTINSTALL: true
      IS_CI: true
      LOGIN_RETRY_COUNT: 3
      CYPRESS: true
      # need at least one oauth provider or next-auth crashes
      DISCORD_CLIENT_ID: test
      DISCORD_CLIENT_SECRET: test
