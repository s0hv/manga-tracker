name: Unit tests

on:
  push:
    branches: [ master, development ]
    paths-ignore:
      - 'scripts/**'
  pull_request:

defaults:
  run:
    working-directory: web

jobs:
  js-tests:
    name: Web app tests
    runs-on: ubuntu-latest
    container: node:16-stretch

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:12.4
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        # Docker Hub image
        image: redis
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    # Force https use since ssh does not work
    - run: 'git config --global url."https://github.com/".insteadOf ssh://git@github.com/'
    - run: 'git config --global url."https://".insteadOf ssh://'

    - name: Install deps
      run: |
        npm ci
        cd .. && npm ci

    - name: Initialize database
      run: cd .. && npm run migrate:up && npm run migrate:test

    - name: Run jest and generate coverage
      run: npm run test:ci

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3.1.0
      with:
        flags: frontend
        name: Frontend coverage

    env:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: postgres
      DB_NAME_TEST: postgres
      DB_USER: postgres
      PGPASSWORD: postgres

      ELASTIC_NODE: http://localhost:9200

      REDIS_URL: redis:6379
      DEBUG: debug,session-*,auth-info
      TZ: UTC
      LEVEL: silent
      SKIP_POSTINSTALL: true

  python-tests:
    name: Scraper tests
    runs-on: ubuntu-latest
    container: python:3.10-buster

    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:12.4
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:7.17.1
        env:
          discovery.type: single-node
        options: >-
          --health-cmd "curl http://localhost:9200/_cluster/health"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
        ports:
          - 9200:9200

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3.3.0
        with:
          node-version: '16'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Lint with flake8
        run: |
          pip install flake8
          # stop the build if there are Python syntax errors or undefined names
          flake8 src --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 src --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Type checks with mypy
        run: mypy --config-file mypy.ini ./src

      - name: Install db migration dependencies
        run: npm ci --ignore-scripts
      - name: Test with pytest
        run: pytest --cov=./src --cov-report=xml src

      - name: Uninstall coveragepy
        run: pip uninstall -y coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3.1.0
        with:
          flags: scraper
          name: Scraper coverage
          files: './coverage/coverage.xml'

    env:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: postgres
      DB_NAME_TEST: postgres
      DB_USER: postgres
      PGPASSWORD: postgres
      DB_PASSWORD: postgres
      NO_TEMP_DB: TRUE
      ELASTIC_TEST_HOST: elasticsearch
      ELASTIC_TEST_PORT: 9200
